# -*- coding: utf-8 -*-
"""Q4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JDhOOy5OSSy_ABPUtcCIJ2XxTcp40Xi
"""

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from google.colab import files

# Upload the image from your local machine
uploaded = files.upload()

# Load the grayscale image and normalize
for image_path in uploaded.keys():
    original_image = Image.open(image_path).convert('L')
    original_image = np.array(original_image, dtype=np.float32) / 255.0

# Function to inject Gaussian noise N(0, 0.1)
def apply_gaussian_noise(image, mean=0, variance=0.1):
    noise = np.random.normal(mean, variance**0.5, image.shape)
    noisy_image = image + noise
    noisy_image = np.clip(noisy_image, 0, 1)
    return noisy_image

# Function to generate a 2D Gaussian kernel
def generate_gaussian_kernel(size, sigma):
    kernel = np.zeros((size, size), dtype=np.float32)
    center = size // 2
    sum_kernel = 0.0
    for i in range(size):
        for j in range(size):
            kernel[i, j] = (1 / (2 * np.pi * sigma**2)) * np.exp(-((i - center)**2 + (j - center)**2) / (2 * sigma**2))
            sum_kernel += kernel[i, j]
    kernel /= sum_kernel
    return kernel

# Function to apply Gaussian blurring
def apply_gaussian_blur(image, kernel_size, sigma):
    kernel = generate_gaussian_kernel(kernel_size, sigma)
    padded_image = np.pad(image, ((kernel_size // 2, kernel_size // 2), (kernel_size // 2, kernel_size // 2)), 'constant')
    blurred_image = np.zeros_like(image)
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            region = padded_image[i:i + kernel_size, j:j + kernel_size]
            blurred_image[i, j] = np.sum(region * kernel)
    return blurred_image

# Function to perform median filtering
def apply_median_filter(image, kernel_size):
    padded_image = np.pad(image, ((kernel_size // 2, kernel_size // 2), (kernel_size // 2, kernel_size // 2)), 'constant')
    filtered_image = np.zeros_like(image)
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            region = padded_image[i:i + kernel_size, j:j + kernel_size]
            filtered_image[i, j] = np.median(region)
    return filtered_image

# Function to add custom noise based on threshold
def add_threshold_noise(image, threshold=0.2):
    noise = np.random.normal(0, 0.1, image.shape)
    thresholded_noise = np.where(noise > threshold, 1, 0)
    noisy_image = image + thresholded_noise
    noisy_image = np.clip(noisy_image, 0, 1)
    return noisy_image

# Add Gaussian noise N(0, 0.1)
gaussian_noisy_image = apply_gaussian_noise(original_image)

# Apply Gaussian blur after adding Gaussian noise
gaussian_blurred_image = apply_gaussian_blur(gaussian_noisy_image, kernel_size=11, sigma=1)

# Apply median filtering after adding Gaussian noise
median_filtered_gaussian = apply_median_filter(gaussian_noisy_image, kernel_size=11)

# Add custom threshold noise
threshold_noisy_image = add_threshold_noise(original_image, threshold=0.2)

# Apply Gaussian blur after adding threshold noise
threshold_gaussian_blurred_image = apply_gaussian_blur(threshold_noisy_image, kernel_size=11, sigma=1)

# Apply median filtering after adding threshold noise
threshold_median_filtered_image = apply_median_filter(threshold_noisy_image, kernel_size=11)

# Plot the results
plt.figure(figsize=(12, 10))

# Original image
plt.subplot(3, 3, 1)
plt.imshow(original_image, cmap='gray')
plt.title('Original Image')

# Gaussian noisy image (N(0, 0.1))
plt.subplot(3, 3, 2)
plt.imshow(gaussian_noisy_image, cmap='gray')
plt.title('Noisy Image (Gaussian N(0, 0.1))')

# Gaussian smoothing after adding Gaussian noise
plt.subplot(3, 3, 3)
plt.imshow(gaussian_blurred_image, cmap='gray')
plt.title('Gaussian Smoothing (Noise)')

# Median filtering after adding Gaussian noise
plt.subplot(3, 3, 4)
plt.imshow(median_filtered_gaussian, cmap='gray')
plt.title('Median Filtering (Noise)')

# Threshold-based noisy image
plt.subplot(3, 3, 5)
plt.imshow(threshold_noisy_image, cmap='gray')
plt.title('Noisy Image (Threshold Noise)')

# Gaussian smoothing after adding threshold noise
plt.subplot(3, 3, 6)
plt.imshow(threshold_gaussian_blurred_image, cmap='gray')
plt.title('Gaussian Smoothing (Threshold)')

# Median filtering after adding threshold noise
plt.subplot(3, 3, 7)
plt.imshow(threshold_median_filtered_image, cmap='gray')
plt.title('Median Filtering (Threshold)')
plt.tight_layout()
plt.show()